import os
import turtle

#FUNCIONES QUE MODIFICAN LOS DATOS DEL PROGRAMA
#uSUARIOS Y CONTRASEÑAS
def update_users(data,name_file):
    """
    Actualiza el archivo de datos "data.cvs" con las cajas que se registran en el programa
    :param dictionary{} data: Diccionario con los parametros de la caja
    :param string name_file: Nombre del archivo donde se almacena los datos
    """
    header = ['user','password']
    glue = ','
    box_line = []
    try:
        file = open(name_file,'w')
        file.write(glue.join(header)+'\n')
        for user in data:
            user_line = []
            user_line.append(user)
            user_line.append(data[user])
            line = glue.join(user_line)+'\n'
            file.write(line)
        file.close()
    except:
        print('EL ARCHIVO NO PUDO SER CREADO')

def load_passwords(data,name_file):
    try:
        file = open(name_file,'r')
        
        rows = file.readlines()
        for row in rows:
            values = row.split(',')

            data[values[0]]=values[1][:-1]
        
        file.close()
    except:
        print('EL ARCHIVO NO PUDO SER LEIDO')

def login():
    passwords = {}
    update_users(passwords,'files/users.csv')    
    load_passwords(passwords,'files/users.csv') 

    while True: 
        clear_screen()
        print("####################################################################################")
        print("                                     SORT BOX")
        print("                               Organizador de cajas")
        print()
        print('1. Login')
        print('2. Registrar nuevo usuario')
        print()
        option = input('Ingrese la opcion deseada: ')
        if option == '1':
            while True:
                clear_screen()
                print("####################################################################################")
                print("                                      LOGIN")
                print("####################################################################################")
                user = input('Ingrese el usuario: ')
                password = input('Ingrese la contraseña: ')
                print()
                if user in passwords and password == passwords[user]:
                    print('Bienvenido '+user+' a SORT BOX')
                    print('Oprima Enter para continuar')
                    n = input()
                    flag = True
                    break
                else:                   
                    print('Usuario o contraseña incorrectos')
                    print('Oprima Enter para continuar o Q para volver')
                    n = input()
                    flag = False
                    if n == 'q' or n=='Q':        
                        break  
            if flag:
                break

        elif option == '2':
            while True:
                clear_screen()
                print("####################################################################################")
                print("                             REGISTRAR NUEVO USUARIO")
                print("####################################################################################")
                user = input('Ingrese el usuario: ')
                if user in passwords:
                    print('El usuario ya esta en uso, registre un nuevo usuario.')
                    print('Oprima Enter para continuar.')
                    n = input()
                else:    
                    print('El usuario '+user+' ha sido registrado.')
                    print('Su contraseña es: ', str(checksum(user,999983,100000)))
                    passwords[user]=str(checksum(user,999983,100000))
                    update_users(passwords,'files/users.csv')
                    print('Oprima Enter para continuar')
                    n = input()
                    break

            else:
                print('Opcion invalida')
                print('Oprima Enter para continuar')
                n = input()

def peso_palabra(word, seed):
    weight=0
    for indice in range(len(word)):
        weight += (ord(word[indice])*(indice+1))%seed
    return weight  
    
def checksum(word,seed,limit):       
    check_sum = peso_palabra(word,seed) * seed  
    if check_sum > limit:
        check_sum = check_sum % limit
    return check_sum

#Archivos
def update_files(data,name_file):
    """
    Actualiza el archivo de datos "data.cvs" con las cajas que se registran en el programa
    :param dictionary{} data: Diccionario con los parametros de la caja
    :param string name_file: Nombre del archivo donde se almacena los datos
    """
    header = ['No. caja','Peso','Largo','Ancho','Alto','Volumen']
    glue = ','
    box_line = []
    try:
        file = open(name_file,'w')
        file.write(glue.join(header)+'\n')
        for box in data:
            box_line = []
            box_line.append(str(box))
            box_line.append(str(data[box][0]))
            box_line.append(str(data[box][1]))
            box_line.append(str(data[box][2]))
            box_line.append(str(data[box][3]))
            vol = data[box][1]*data[box][2]*data[box][3]
            box_line.append(str(vol))
            line = glue.join(box_line)+'\n'
            file.write(line)
        file.close()
    except:
        print('EL ARCHIVO DATA.CSV NO PUDO SER CREADO')

def load_files(data,name_file):
    try:
        file = open(name_file,'r')
        
        rows = file.readlines()
        for row in range(1,len(rows)):
            string = rows[row]
            string = string[0:-1]
            values = string.split(',')
            values_int = []
            for value in values:
                values_int.append(int(value))
            data[values_int[0]]= values_int[1:]
        file.close()
    except:
        print('EL ARCHIVO NO PUDO SER LEIDO')    

def print_file(data,filter,type_filter):
    """
    Actualiza el archivo de datos "data.cvs" con las cajas que se registran en el programa
    :param dictionary{} data: Diccionario con los parametros de la caja
    :param string name_file: Nombre del archivo donde se almacena los datos
    """
    filters = {0:'NUMERO DE CAJA',1:'PESO',2:'LARGO',3:'ANCHO',4:'ALTO',5:'VOLUMEN'}
    types = {'1':' DE MENOR A MAYOR','2':' DE MAYOR A MENOR'}
    header = "|  n. caja   |  peso kg   |  largo cm  |  ancho cm  |  alto  cm  |volumen cm^3|"    
    try:
        file = open('files\print_file.txt','w')
        file.write("     CAJAS ORDENADOAS POR: "+filters[filter]+types[type_filter]+'\n')
        file.write("-"*len(header)+'\n')
        file.write(header+'\n')
        for i in range(len(data)):
            row='|'  
            for j in range(len(data[i])):  
                row += ' '*(12-len(str(data[i][j]))) +str(data[i][j]) + '|'           
            row += '\n'
            file.write(row)
        file.write("-"*len(header)+'\n')      
        file.write('\n')    
        file.write("BY SORT BOX"+'\n')    
        file.close()
         
    except:
        print('EL ARCHIVO print_file.txt NO PUDO SER CREADO')

#Creacion, modificacion de cajas
def create_box(number_box):
    """
    crea una caja en forma de lista donde se guarda 
    en el indice 0 el peso
    en el indice 1 el largo
    en el indice 2 el ancho
    en el indice 3 el alto
    en el indice 4 el volumen
    :param int number_box: Numero de la caja 
    :return: list[] 
    """
    box =[]#Crea una caja VACIA
    print("______________________________________________________")
    print(f"                 Caja {number_box}")
    print("______________________________________________________")
    box.append(values(0))
    box.append(values(1))
    box.append(values(2))
    box.append(values(3))
    box.append( box[1]*box[2]*box[3]) #Volumen de la caja
    return box

def values(data): 
    """
    Esta función controla las excepciones de los valores de la caja
    :param int data: Numero entero corespondiente al dato que se desea ingresar
    :return int value: Numero entero correspondiente al valor del parametro
    """
    information={0:"peso (Kg):", 1:"largo(Cm):", 2:"alto(Cm):", 3:"ancho(Cm):"}
    new_data=information[data]
    value="not value"
    while value=="not value":
        try:
            value=int(input("Ingrese el valor del "+new_data))
            if value<0:
                value="not value"
                print("por favor escriba un valor numérico mayor a 0")        
        except:
            print("por favor escriba un valor numérico mayor a 0")   
    return value 

def add_box(dic_box):
    '''
    añade una cantidad de cajas nueva a un diccionario de cajas
    :param diccionary{} dic_box: diccionario de cajas
    :return: list{} 
    '''
    while True:
        try:
            number_box = int(input("Ingrese el numero de cajas a registrar. "))
            while number_box <=0:
                print("¡NUMERO DE CAJAS INVALIDO!")
                number_box = int(input("Ingrese el numero de cajas a registrar. "))            
            for num in range(len(dic_box),len(dic_box)+number_box):  
                dic_box[num+1]= create_box(num+1)              
            break    
        except:
            print("Entrada no valida") 
    update_files(dic_box,'files\data.csv')         
    return dic_box

def set_box(dic_box,num_box,index,new_value):
    """
    modifica el parametro de una caja
    :param dicctionary{} dic_box: Diccionario de cajas de cajas
    :param int num_box: numero que identifica una caja
    :param int index: indice del parametro de la caja a modificar
    :param int new_value: Nuevo valor del parametro
    """ 
    for num in dic_box:
        if num == num_box :   
            dic_box[num][index-1]= new_value
            dic_box[num][4]= dic_box[num][1]*dic_box[num][2]*dic_box[num][3]  #Actualiza el volumen  
    update_files(dic_box,'files\data.csv')  

def box_in_list(dic_box,num_box):
    """
    valida si el numero de la caja esta dentro de la lista
     :param diccionary{} dic_box: diccionario de cajas
    :param int num_box: Numero de caja
    :return: True|False
    """
    if num_box in dic_box:
        return True
    else:
        return False

#Ordenamiento
def dic_to_list_box(dic_box):
    list_box = []    
    for n in range(len(dic_box)):
        box_info = [n+1]+dic_box[n+1]
        list_box.append(box_info)
    return list_box    

def sort_list_box_less(list_box,filter): 
    """
    organiza una lista de cajas de acuerdo con un filtro de menor a mayor
    :param list[] list_box: lista de cajas
    :param int filter: filtro por el que se organiza(1=peso, 2=altura, 3=largo, 4=ancho, 5=volumen, 0=numero de caja)
    """    
    for step in range(1,len(list_box)): 
        for position in range(len(list_box)-step): 
            if list_box[position][filter] > list_box[position+1][filter]:
                temp = list_box[position]
                list_box[position] = list_box[position+1]
                list_box[position+1]= temp

def sort_list_box_mayor(list_box,filter): 
    """
    organiza una lista de cajas de acuerdo con un filtro de mayor a menor
    :param list[] list_box: lista de cajas
    :param int filter: filtro por el que se organiza(1=peso, 2=altura, 3=largo, 4=ancho, 5=volumen, 0=numero de caja)
    """  
    for step in range(1,len(list_box)):
        for position in range(len(list_box)-step): 
            if list_box[position][filter] < list_box[position+1][filter]:
                temp = list_box[position]
                list_box[position] = list_box[position+1]
                list_box[position+1]= temp

#Menu
def menu(dic_box,t):
    '''
    tiene la logica del funcionamiento del menu principal
    :param list[] list_box: lista de cajas
    '''
    
    if len(dic_box) == 0:
        print_header()
        print("No hay cajas registradas")
        add_box(dic_box)      

    filter = 0
    type_order = '1'
    list_box = dic_to_list_box(dic_box)

    while True:
        print_menu()
        option = input("Ingrese la opcion deseada: ")
        
        
        if option == '1':#imprime la lista de cajas
            clear_screen()
            print_list_box(list_box)
            print_file(list_box,filter,type_order)

        elif option == '2':#ordenar por filtro
            clear_screen()
            while True:
                print_menu_filter()
                while True:
                    option = input("Ingrese la opcion deseada: ")
                    try:
                         filter = int(option)
                         break
                    except:
                        print("OPCION INVALIDA")                    
                
                if option == '1':#ordenar por peso
                    clear_screen()
                    while True:                        
                        print_menu_mayor_minor()
                        type_order = input("Ingrese la opcion deseada: ")
                        if type_order == "1":
                            sort_list_box_less(list_box,1)
                            break

                        elif type_order == '2':
                            sort_list_box_mayor(list_box,1)
                            break

                        else: 
                            print("¡OPCION INVALIDA!")                  
                    break                   

                elif option == '2':#ordenar por largo
                    clear_screen()
                    while True:
                        print_menu_mayor_minor()
                        option = input("Ingrese la opcion deseada: ")
                        if option == "1":
                            sort_list_box_less(list_box,2)
                            break

                        elif option == '2':
                            sort_list_box_mayor(list_box,2)
                            break

                        else: 
                            print("¡OPCION INVALIDA!")
                    break

                elif option == '3':#ordenar por ancho
                    clear_screen()
                    while True:
                        print_menu_mayor_minor()
                        option = input("Ingrese la opcion deseada: ")
                        if option == "1":
                            sort_list_box_less(list_box,3)
                            break

                        elif option == '2':
                            sort_list_box_mayor(list_box,3)
                            break

                        else: 
                            print("¡OPCION INVALIDA!")
                    break

                elif option == '4':#ordenar por alto
                    clear_screen()
                    while True:
                        print_menu_mayor_minor()
                        option = input("Ingrese la opcion deseada: ")
                        if option == "1":
                            sort_list_box_less(list_box,4)
                            break

                        elif option == '2':
                            sort_list_box_mayor(list_box,4)
                            break

                        else: 
                            print("¡OPCION INVALIDA!")  
                    break                   
           

                elif option == '5':#ordenar por volumen
                    clear_screen()
                    while True:
                        print_menu_mayor_minor()
                        option = input("Ingrese la opcion deseada: ")
                        if option == "1":
                            sort_list_box_less(list_box,5)
                            break

                        elif option == '2':
                            sort_list_box_mayor(list_box,5)
                            break

                        else: 
                            print("¡OPCION INVALIDA!")
                    break                       

                elif option == '6': #Ordenar por numero de caja
                    clear_screen() 
                    while True:
                        print_menu_mayor_minor()
                        option = input("Ingrese la opcion deseada: ")
                        if option == "1":
                            sort_list_box_less(list_box,0)
                            break

                        elif option == '2':
                            sort_list_box_mayor(list_box,0)
                            break

                        else: 
                            print("¡OPCION INVALIDA!")
                    break  
     
                else: 
                    print("¡OPCION INVALIDA!")            

        elif option == '3':#Modificar caja
            clear_screen()

            while True:
                print_select_box(dic_to_list_box(dic_box))

                while True:
                    option = input("Seleccione el numero de caja a modificar: ")
                    try:
                        option = int(option)
                        break
                    except:
                        print("OPCION INVALIDA")  

                if box_in_list(dic_box,option):  
                    num_parameters = 4#peso,alto,largo,ancho

                    while True:
                        print_menu_set_parameter(option)

                        while True:
                            option2 = input("Seleccione el parametro a modificar: ")
                            try:

                                option2 = int(option2)
                                break
                            except:
                                print("OPCION INVALIDA")  
                        option2 = int(option2)

                        while True:
                            new = input("Nuevo valor (Recuerde que solo puede utilizar numeros enteros): ")
                            try:
                                new = int(new)
                                break
                            except:
                                print("¡ENTRADA INVALIDA!")

                        if option2 <= num_parameters and option2 >0:       
                            set_box(dic_box,option,option2,new)
                            break
                        else:
                            print("¡OPCION INVALIDA!")    
                    break

                else:
                    print("¡NUMERO DE CAJA INVALIDO!")
            list_box = dic_to_list_box(dic_box)    

        elif option == '4':
            clear_screen()
            print_add_box()
            add_box(dic_box)
            list_box = dic_to_list_box(dic_box)

        elif option == '5':
            clear_screen()
            print_box(list_box,filter)            
            try:           
                print_box_turtle(t,dic_box)
            except:  
                wn = turtle.Screen()
                t = turtle.Turtle()
                print_box_turtle(t,dic_box)   
            
        elif option == 'e':
            break
        
        else:
            print("OPCION INVALIDA")  
            
#FUNCIONES DE LA INTERFAZ GRAFICA DE USUARIO

#Limpieza pantalla
def clear_screen(): #Definimos la función estableciendo el nombre que queramos
    if os.name == "posix":
        os.system ("clear")
    elif os.name == "ce" or os.name == "nt" or os.name == "dos":
        os.system ("cls")

#Menu
def print_header():
    print("####################################################################################")
    print("                                     SORT BOX")
    print("                               Organizador de cajas")
    print()
    print("                                  MENU PRINCIPAL")
    print("####################################################################################")

def print_menu():
    """
    imprime el menu principal    
    """   
    print_header()
    print()
    print("1. Imprimir lista de cajas")
    print("2. Organizar lista de cajas")
    print("3. Modificar caja")
    print("4. Agregar cajas")
    print("5. Imprimir las cajas graficamente ")
    print()
    print("'e' para salir del programa")
    print()
    print()
    print()
    print("                     Este programa ha sido deesarrollado por:")
    print("                                  David Pulido")
    print("                                  Juan Laverde")
    print("                                 Miguel Parada")
    print()
    print("                        Universidad Nacional de Colombia")
    print("####################################################################################")

def print_list_box(list_box):
    """
    Imprime una lista de cajas con un formato
    :param lis[] list_box: lista de cajas
    """
    print("####################################################################################")
    print("                                 LISTA DE CAJAS")
    print("####################################################################################")
    print("____________________________________________________________________________________")  
    print()
    print("|  n. caja   ||  peso kg   ||  largo cm  ||  ancho cm  ||  alto  cm  ||volumen cm^3|")
    for i in range(len(list_box)):
        for j in range(len(list_box[i])): 
            print(f"|{list_box[i][j]:12}",end = '|')
        print()  
    print("____________________________________________________________________________________")  

def print_menu_filter():
    """
    imprime el menu de opciones para organizar de acuerdo a un filtro
    """
    print("####################################################################################")
    print("                            ORGANIZAR LISTA DE CAJAS") 
    print("####################################################################################")
    print()
    print("1. Ordenar por peso")
    print("2. Ordenar por largo")
    print("3. Ordenar por ancho")
    print("4. Ordenar por alto")
    print("5. Ordenar por volumen") 
    print("6. Ordenar por numero de caja")  
    print()

def print_menu_mayor_minor():
    """
    imprime el menu de opciones para organizar
    """
    print("####################################################################################")
    print("                              METODO DE ORGANIZACION")
    print("####################################################################################")
    print()
    print("1.Ordenar de menor a mayor")
    print("2.Ordenar de mayor a menor")
    print()   

def print_select_box(list_box):
    """
    Imprime el menu de seleccion de las caja
    :param list[] list_box: Lista de cajas
    """
    print("####################################################################################")
    print("                                   MODIFICAR CAJA")
    print("####################################################################################")
    print()
    print_list_box(list_box)

def print_menu_set_parameter(number_box):
    """
    imprime el menu de las opciones de los parametros que se pueden modificar en una caja    
    :param int number_box: Numero de la caja
    """
    
    print("####################################################################################")
    print("                                 CAJA No. "+str(number_box))
    print("                              Parametro a modificar") 
    print("####################################################################################")
    print()
    print("1. Peso")
    print("2. Largo")
    print("3. Ancho")
    print("4. Alto")
    print()
    
def print_add_box():
    print("####################################################################################")
    print("                                   AGREGAR CAJAS") 
    print("####################################################################################")
   
def print_box(box_list,filter):

    '''
     Imprime cajas en el orden filtrado con un formato grafico
    :param list[] box_list: lista de cajas
    :param int filter: Filtro por el que se ordenan las cajas 
    '''
    print("####################################################################################")
    print("                                   VISTA DE ESTANTE")
    print("####################################################################################")
    
    magnitud=''
    if filter == 1:
        magnitud = 'kg'
    elif filter>1 and filter<5:
        magnitud = 'cm'
    elif filter == 5:
        magnitud = 'cm^3'

    for box_id in range(len(box_list)):
        
        info = str(box_list[box_id][filter])
        box_len = len(info)

        zero_character = "0" * ((box_len+len(magnitud) )- int(box_list[box_id][0])//10 - 1)        
        line = "┼"+'─'* (box_len+len(magnitud))+"┼"

        print(line)
        print("│" + zero_character + str(box_list[box_id][0]) + "│")
        print("│" + info + magnitud+"│")
        print(line)
        print() 

#Turtle
def print_ico(t,size):
    """
    Imprime un fractal
    :param int size: Tamaño de la rama principal del fractal
    """ 
    t.speed(0) 
    t.pensize(size/10) 
    if size<20:
        t.dot(10,'black')
        return
    t.forward(size)

    #izquierda
    t.left(90)
    print_ico(t,size/1.62) 

    #centro
    t.right(90)
    print_ico(t,size/1.62)  

    #derecha
    t.right(90)
    print_ico(t,size/1.62)  

    #regresar
    t.left(90)
    t.backward(size)
    
def print_logo(t):
    """
    Funcion que imprime el logo del programa SORT BOX
    """
    t.color('yellow') 
    print_ico(t,100)
    t.color('red')
    t.left(90)
    print_ico(t,100)
    t.color('green')
    t.left(90)
    print_ico(t,100)
    t.color('blue')    
    t.left(90)
    print_ico(t,100)
    t.color('grey')
    t.penup()
    t.forward(50)
    t.left(90)
    t.forward(50)    
    t.pendown()
    

    t.fillcolor('black')
    t.begin_fill()
    t.left(90)
    t.forward(100)
    t.left(90)
    t.forward(100)
    t.left(90)
    t.forward(100)
    t.left(90)
    t.forward(100)
    t.end_fill()

    t.pensize(5)
    t.hideturtle()
    t.color('white')
    t.penup()
    t.left(90)
    t.forward(90)
    t.left(90)
    t.forward(60)
    t.pendown()

    #S
    t.forward(30)

    t.left(90)    
    t.forward(30)

    t.left(90)
    t.forward(30)

    t.right(90)
    t.forward(30)

    t.right(90)
    t.forward(30)

    t.penup()
    t.right(90)
    t.forward(10)
    t.right(90)
    t.forward(50)
    t.pendown()

    #B
    t.right(90)
    t.forward(30)

    t.left(90)    
    t.forward(30)

    t.left(90)    
    t.forward(30)

    t.left(90)    
    t.forward(30)

    t.right(90)
    t.forward(30)

    t.right(90)
    t.forward(25)

    t.right(90)
    t.forward(30)

def print_box_turtle(t,data):
    t.reset()
    t.color('black')
    t.speed(0)
    for i in range(1,len(data)+1):
        poli(t,i*10,4)
        t.forward(i*10+10)

def poli(t,side,n):
    for i in range(n):
        t.forward(side)
        t.right(360/n)
    

#INICIO DEL PROGRAMA

def main():    
    
    login()
    clear_screen()
    
    wn = turtle.Screen()
    t = turtle.Turtle()  
    print_logo(t)
    dic_box = {}
    load_files(dic_box,'files/data.csv')
    menu(dic_box,t)
main()
